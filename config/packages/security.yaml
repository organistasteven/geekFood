security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall
            form_login:
                # "app_login" is the name of the route created previously
                # GET route
                login_path: app_login
                # POST route
                check_path: app_login
                # https://symfony.com/doc/current/security/form_login.html#redirecting-after-success
                default_target_path: app_backhome
            
            # https://symfony.com/doc/current/security/impersonating_user.html
           
            
            logout:
                # nom de la route qui va déclencher la déconnexion
                # que le composant de sécurité prend en charge
                path: app_logout
                # redirection après logout (par défaut on retourne sur /)
                # https://symfony.com/doc/current/reference/configuration/security.html#target
                target: /login
            #custom_authenticator: App\Security\AppAuthenticator

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
             # - { path: ^/admin, roles: ROLE_ADMIN }
             # - { path: ^/profile, roles: ROLE_USER }
             # new

             
             - { path: ^/(plat|start|dessert|menu|user)/new, roles: ROLE_ADMIN, methods: [GET, POST] }
       
             - { path: ^/(plat|start|dessert|reservation|menu|user|message)/\d+/edit, roles: ROLE_ADMIN, methods: [GET, POST] }
      
             - { path: ^/(plat|start|dessert|reservation|menu|user|message)/\d+, roles: ROLE_ADMIN, methods: POST }
             - { path: ^/(plat|start|dessert)/new, roles: ROLE_MANAGER, methods: [GET, POST] }
        
             - { path: ^/(plat|start|dessert)/new, roles: ROLE_MANAGER, methods: [GET, POST] }
                 
             - { path: ^/(plat|start|dessert)/\d+/edit, roles: ROLE_MANAGER, methods: [GET, POST] }
       
             - { path: ^/(plat|start|dessert)/\d+, roles: ROLE_MANAGER, methods: POST }
            
             - { path: ^/backhome, roles: ROLE_ADMIN }        
            
    role_hierarchy:
        # le manager a les mêmes permissions que le simple utilisateur
        ROLE_MANAGER: ROLE_MANAGER
        # l'admin hérite des permissions du manager (et en cascade, du simple utilisateur)
        ROLE_ADMIN: ROLE_MANAGER
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
